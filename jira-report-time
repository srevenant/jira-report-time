#!/usr/bin/env python3
"""
Jira time reporter

License: GNU Affero
"""

import os
import sys
import re
import json
import dictlib
import sys
import openpyxl
import argparse
import traceback
import requests
#from jira.client import JIRA
#from jira.config import get_jira
from jira import JIRA
import datetime
import dateutil.parser
import json
import pytz
import argparse
from slacker import Slacker

from jira_time import warn, debug, didLog, JiraData, inHours

################################################################################
def main():

    # config via file or stdin
    config = dict(
        start='',
        days='',
        group_field='Client/s',
        group_project='',
        slack_apikey='',
        slack_channels='',
        jira_url='',
        jira_user='',
        jira_pass='',
    )
    parser = argparse.ArgumentParser()
    parser.add_argument('--config', '-c')
    args = parser.parse_args()
    if args.config:
        with open(args.config) as infile:
            config = dictlib.Obj(dictlib.union(config, json.load(infile)))
    else:
        warn("reading config from stdin, end with EOF")
        config = dictlib.Obj(dictlib.union(config, json.load(sys.stdin)))

    tz = pytz.timezone("UTC")
    if os.environ.get('TZ'):
        warn("Using TZ={}".format(os.environ['TZ']))
        tz = pytz.timezone(os.environ['TZ'])

    today = datetime.datetime.now()

    config.days = int(config.days)
    if os.environ.get('REPORT_START'):
        config.start = os.environ.get('REPORT_START')
    if os.environ.get('REPORT_END'):
        config.end = os.environ.get('REPORT_END')

    if config.get('start'):
        date_start = dateutil.parser.parse(config.start).date()
    else:
        today = datetime.datetime.now().date()
        date_start = today - datetime.timedelta(days=config.days)
        warn("Defaulting to start {} days ago: {}".format(config.days, date_start))

    if config.get('end'):
        date_end = dateutil.parser.parse(config.end).date()
        config.days = (date_end - date_start).days
    else:
        date_end = date_start + datetime.timedelta(days=config.days)

    # move into include time - python makes this very painful
    date_start = datetime.datetime.combine(date_start, datetime.time(0, 0, 0))
    date_end = datetime.datetime.combine(date_end, datetime.time(23, 59, 59))
    date_start = tz.localize(date_start)
    date_end = tz.localize(date_end)

    print(os.environ.get('REPORT_START'))
    warn("Report for {} to {} ({} days)".format(date_start, date_end, config.days))
    sys.exit(0)

    ##############################################################################
    warn("Connecting to jira (" + config.jira_url + ")...")
    jira = JIRA(config.jira_url, auth=(config.jira_user, config.jira_pass))

    warn("Collecting data from jira...")
    grpempty = 'Product' # config eventually...
    grpAllShow = True # config eventually... Include all when on Detail?
    data = JiraData(jira, date_start, date_end, grpfield=config.group_field, grpproj=config.group_project, grpempty=grpempty).gather()

    ##############################################################################
    warn("Building Report...")
    label = 'Group'
    if config.group_field:
        label = config.group_field.split("/")[0]
    elif config.group_project:
        label = 'Project'

    report_file = "Time Report {}~{}.xlsx".format(date_start, date_end)
    if os.path.exists(report_file):
        os.unlink(report_file)
    warn("output file: " + report_file)

    workbook = openpyxl.Workbook()
    sheet = workbook.active
    sheet.title = 'Summary'
    def addRow(row, *dup):
        sheet.append(row)
#        if dup:
#            print("\t".join(row))

    addRow([])
    addRow(["Time Summary from " + str(date_start) + " to " + str(date_end)])
    addRow(["Hours", label], True)

    # report overall summary
    for group in data.pergrp:
        addRow([inHours(data.pergrp[group].sum), group], True)

    # closure functions to reduce duplicted code
    def addMidRow(issue):
        addRow([inHours(issue.sum),
                issue.key + " " + data.issues[issue.key].fields.summary])
    def addWorkRow(issue):
        addMidRow(issue)
        worklog = dict()
        for log in sorted(issue.logs, key=lambda e: e.seconds, reverse=True):
            key = log.author.name
            if log.comment:
                key = key + ": " + log.comment
            if worklog.get(key):
                worklog[key] = worklog[key] + float(inHours(log.seconds))
            else:
                worklog[key] = float(inHours(log.seconds))
        for log in sorted(worklog.keys(), key=lambda e: worklog[e], reverse=True):
            addRow(['', log, worklog[log]])

    ### report on each individual group as a separate sheet
    for group in data.pergrp:
        if grpAllShow and group == grpempty: # skip this one, since it is everywhere else
            continue
        sheet = workbook.create_sheet(("Issues " + group)[:31])
        addRow([])
        addRow([group + " Issue Report"], True)
        addRow(["Hours", "Issue"])

        for issue in sorted(data.pergrp[group].issues.values(),
                            key=lambda e: e.sum, reverse=True):
            addMidRow(issue)

        # and add in the common/all issues (but separately)
        if not grpAllShow:
            continue

        addRow([])
        addRow([grpempty + " Issues"])
        addRow(["Hours", "Issue"])
        for issue in sorted(data.pergrp[grpempty].issues.values(),
                            key=lambda e: e.sum, reverse=True):
            addMidRow(issue)

    # even more detail
    for group in data.pergrp:
        if grpAllShow and group == grpempty: # skip this one, since it is everywhere else
            continue

        sheet = workbook.create_sheet(("Detail " + group)[:31])
        addRow([])
        addRow([group + " Detail Report"], True)
        addRow(["Hours", "Issue/Log Author", "(hours)"])
        for issue in sorted(data.pergrp[group].issues.values(),
                            key=lambda e: e.sum, reverse=True):
            addWorkRow(issue)

        if not grpAllShow:
            continue

        addRow([])
        addRow([grpempty + " Details"], True)
        addRow(["Hours", "Issue/Log Author", "(hours)"])
        for issue in sorted(data.pergrp[grpempty].issues.values(),
                            key=lambda e: e.sum, reverse=True):
            addWorkRow(issue)

    # and the last sheet is per person
    sheet = workbook.create_sheet("Per Person")
    for dev in data.perdev:
        addRow([])
        addRow([dev + " Detail Report"], True)
        addRow(["Hours", "Issue"])
        sum = 0

        for issue in sorted(data.perdev[dev].issues.values(), key=lambda e: e.sum, reverse=True):
            addRow([inHours(issue.sum), issue.key + " " + data.issues[issue.key].fields.summary])
            logs = data.perdev[dev].issues[issue.key].logs
            worklog = dict()
            for log in sorted(logs, key=lambda e: e.seconds, reverse=True):
                if log.author != dev:
                    continue
                msg = log.issue + " " + data.issues[log.issue].fields.summary
                key = ''
                if log.comment:
                    key = log.comment
                if not key:
                    key = '<no comment>'
                if worklog.get(key):
                    worklog[key] = worklog[key] + float(inHours(log.seconds))
                else:
                    worklog[key] = float(inHours(log.seconds))
            if len(worklog) > 1:
                for log in sorted(worklog.keys(), key=lambda e: worklog[e], reverse=True):
                    addRow(['', log, worklog[log]])

    workbook.save(report_file)
    warn(report_file)

    ##############################################################################
    # and upload to slack
    if config.slack_apikey and config.slack_channels:
        slack = Slacker(config.slack_apikey)
        response = slack.files.upload(report_file, channels=config.slack_channels)
        warn("Upload to slack {} status={}".format(config.slack_channels, response.successful))
    else:
        sys.exit("No slack configuration?  Not uploading results!")

    sys.exit(0)

################################################################################
if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        pass

