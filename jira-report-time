#!/usr/bin/env python3
"""
Jira time reporter

License: GNU Affero
"""

import os
import sys
import re
import json
import dictlib
import sys
import openpyxl
import argparse
import traceback
import requests
#from jira.client import JIRA
#from jira.config import get_jira
from jira import JIRA
import datetime
import dateutil.parser
import json
import argparse
from slacker import Slacker

from jira_time import warn, debug, didLog, JiraData, inHours

################################################################################
def main():

    # config via file or stdin
    config = dict(
        start='',
        days='',
        group_field='Client/s',
        group_project='',
        slack_apikey='',
        slack_channels='',
        jira_url='',
        jira_user='',
        jira_pass='',
    )
    parser = argparse.ArgumentParser()
    parser.add_argument('--config')
    args = parser.parse_args()
    if args.config:
        with open(args.config) as infile:
            config = dictlib.Obj(dictlib.union(config, json.load(infile)))
    else:
        warn("reading config from stdin, end with EOF")
        config = dictlib.Obj(dictlib.union(config, json.load(sys.stdin)))

    config.days = int(config.days)
    if config.get('start'):
        date_start = dateutil.parser.parse(config.start).date()
    else:
        today = datetime.datetime.now().date()
        date_start = today - datetime.timedelta(days=config.days)
        warn("Defaulting to start {} days ago: {}".format(config.days, date_start))

    date_end = date_start + datetime.timedelta(days=config.days)

    warn("Report for {} to {} ({} days)".format(date_start, date_end, config.days))

    ##############################################################################
    warn("Connecting to jira (" + config.jira_url + ")...")
    jira = JIRA(config.jira_url, auth=(config.jira_user, config.jira_pass))

    warn("Collecting data from jira...")
    data = JiraData(jira, date_start, date_end, grpfield=config.group_field, grpproj=config.group_project).gather()

    ##############################################################################
    warn("Building Report...")
    label = 'Group'
    if config.group_field:
        label = config.group_field.split("/")[0]
    elif config.group_project:
        label = 'Project'

    report_file = "Time Report {}~{}.xlsx".format(date_start, date_end)
    if os.path.exists(report_file):
        os.unlink(report_file)
    warn("output file: " + report_file)

    workbook = openpyxl.Workbook()
    sheet = workbook.active
    sheet.title = 'Summary'
    def output(row, *dup):
        sheet.append(row)
#        if dup:
#            print("\t".join(row))

    output([])
    output(["Time Summary from " + str(date_start) + " to " + str(date_end)])
    output(["Hours", label], True)

    for group in data.pergrp:
        output([inHours(data.pergrp[group].sum), group], True)

#    output(["----"])
    for group in data.pergrp:
        sheet = workbook.create_sheet(("Issues " + group)[:31])
        output([])
        output([group + " Issue Report"], True)
        output(["Hours", "Issue"])
        for issue in sorted(data.pergrp[group].issues.values(), key=lambda e: e.sum, reverse=True):
            output([inHours(issue.sum), issue.key + " " + data.issues[issue.key].fields.summary])

#    output(["----"])
    for group in data.pergrp:
        sheet = workbook.create_sheet(("Detail " + group)[:31])
        output([])
        output([group + " Detail Report"], True)
        output(["Hours", "Issue/Log Author", "(hours)"])
        for issue in sorted(data.pergrp[group].issues.values(), key=lambda e: e.sum, reverse=True):
            output([inHours(issue.sum), issue.key + " " + data.issues[issue.key].fields.summary])
            worklog = dict()
            for log in sorted(issue.logs, key=lambda e: e.seconds, reverse=True):
                key = log.author.name
                if log.comment:
                    key = key + ": " + log.comment
                if worklog.get(key):
                    worklog[key] = worklog[key] + float(inHours(log.seconds))
                else:
                    worklog[key] = float(inHours(log.seconds))
            for log in sorted(worklog.keys(), key=lambda e: worklog[e], reverse=True):
                output(['', log, worklog[log]])

    sheet = workbook.create_sheet("Per Person")
    for dev in data.perdev:
        output([])
        output([dev + " Detail Report"], True)
        output(["Hours", "Issue"])
        sum = 0

        for issue in sorted(data.perdev[dev].issues.values(), key=lambda e: e.sum, reverse=True):
            output([inHours(issue.sum), issue.key + " " + data.issues[issue.key].fields.summary])
            logs = data.perdev[dev].issues[issue.key].logs
            worklog = dict()
            for log in sorted(logs, key=lambda e: e.seconds, reverse=True):
                if log.author != dev:
                    continue
                msg = log.issue + " " + data.issues[log.issue].fields.summary
                key = ''
                if log.comment:
                    key = log.comment
                if not key:
                    key = '<no comment>'
                if worklog.get(key):
                    worklog[key] = worklog[key] + float(inHours(log.seconds))
                else:
                    worklog[key] = float(inHours(log.seconds))
            if len(worklog) > 1:
                for log in sorted(worklog.keys(), key=lambda e: worklog[e], reverse=True):
                    output(['', log, worklog[log]])

    workbook.save(report_file)
    warn(report_file)

    ##############################################################################
    # and upload to slack
    if config.slack_apikey and config.slack_channels:
        slack = Slacker(config.slack_apikey)
        response = slack.files.upload(report_file, channels=config.slack_channels)
        warn("Upload to slack {} status={}".format(config.slack_channels, response.successful))
    else:
        sys.exit("No slack configuration?  Not uploading results!")

    sys.exit(0)

################################################################################
if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        pass

